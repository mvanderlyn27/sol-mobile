
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "postgis" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."book_type" AS ENUM (
    'journal',
    'defaultJournal'
);

ALTER TYPE "public"."book_type" OWNER TO "postgres";

COMMENT ON TYPE "public"."book_type" IS 'type of book';

CREATE OR REPLACE FUNCTION "public"."create_book_and_page_entry"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    new_book_id bigint;
BEGIN
    -- Insert a new entry in the books table
    INSERT INTO public.books (created_by, type)
    VALUES (NEW.id, 'journal')
    RETURNING id INTO new_book_id;

    -- Insert a new entry in the pages table with the newly created book id
    INSERT INTO public.pages (book, created_at, date)
    VALUES (new_book_id, now(), now());

    RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."create_book_and_page_entry"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."create_profile_on_signup"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
    INSERT INTO public.profiles (id, created_at, name, new)
    VALUES (NEW.id, NEW.created_at, COALESCE(NEW.raw_user_meta_data->>'name', ''), TRUE);
    RETURN NEW;
END;$$;

ALTER FUNCTION "public"."create_profile_on_signup"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."books" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "type" "public"."book_type" DEFAULT 'journal'::"public"."book_type" NOT NULL,
    "created_by" "uuid" DEFAULT "auth"."uid"() NOT NULL
);

ALTER TABLE "public"."books" OWNER TO "postgres";

ALTER TABLE "public"."books" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."books_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."fonts" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "type" "text" NOT NULL,
    "fontImage" "text",
    "name" "text" NOT NULL
);

ALTER TABLE "public"."fonts" OWNER TO "postgres";

ALTER TABLE "public"."fonts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."fonts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."frames" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "path" "text" NOT NULL,
    "name" "text" NOT NULL,
    "width" double precision NOT NULL,
    "height" double precision NOT NULL,
    "maskPath" "text" NOT NULL
);

ALTER TABLE "public"."frames" OWNER TO "postgres";

COMMENT ON COLUMN "public"."frames"."width" IS 'original pixel width';

COMMENT ON COLUMN "public"."frames"."height" IS 'original height pixels';

ALTER TABLE "public"."frames" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."frames_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."pages" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "book" bigint,
    "date" "date" NOT NULL,
    "canvas" "jsonb",
    "last_edited" timestamp with time zone
);

ALTER TABLE "public"."pages" OWNER TO "postgres";

ALTER TABLE "public"."pages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "avatar_url" "text",
    "new" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

COMMENT ON COLUMN "public"."profiles"."new" IS 'tracks new users';

CREATE TABLE IF NOT EXISTS "public"."stickers" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "path" "text"
);

ALTER TABLE "public"."stickers" OWNER TO "postgres";

ALTER TABLE "public"."stickers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."stickers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."templates" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "data" "jsonb",
    "path" "text"
);

ALTER TABLE "public"."templates" OWNER TO "postgres";

ALTER TABLE "public"."templates" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."templates_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."waitlist" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email" "text" NOT NULL
);

ALTER TABLE "public"."waitlist" OWNER TO "postgres";

ALTER TABLE "public"."waitlist" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."waitlist_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."fonts"
    ADD CONSTRAINT "fonts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."frames"
    ADD CONSTRAINT "frames_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."frames"
    ADD CONSTRAINT "frames_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."pages"
    ADD CONSTRAINT "pages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."stickers"
    ADD CONSTRAINT "stickers_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."templates"
    ADD CONSTRAINT "templates_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."waitlist"
    ADD CONSTRAINT "waitlist_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "user_signup_trigger" AFTER INSERT ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."create_book_and_page_entry"();

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."pages"
    ADD CONSTRAINT "pages_book_fkey" FOREIGN KEY ("book") REFERENCES "public"."books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "All profile public" ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Anyone can see stickers" ON "public"."stickers" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."fonts" FOR SELECT USING (true);

CREATE POLICY "Enable write for anyone" ON "public"."waitlist" FOR INSERT WITH CHECK (true);

CREATE POLICY "Owner of book can do anything to pages" ON "public"."pages" USING ((EXISTS ( SELECT 1
   FROM "public"."books" "b"
  WHERE (("b"."id" = "pages"."book") AND ("b"."created_by" = "auth"."uid"())))));

CREATE POLICY "User can do anything to their books" ON "public"."books" USING (("created_by" = "auth"."uid"()));

CREATE POLICY "anyone can see templates" ON "public"."templates" FOR SELECT USING (true);

CREATE POLICY "anyone can select a fraem" ON "public"."frames" FOR SELECT USING (true);

ALTER TABLE "public"."books" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."fonts" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."frames" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."pages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."stickers" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."templates" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "user owns their account" ON "public"."profiles" USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."waitlist" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_book_and_page_entry"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_book_and_page_entry"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_book_and_page_entry"() TO "service_role";

GRANT ALL ON FUNCTION "public"."create_profile_on_signup"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_profile_on_signup"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_profile_on_signup"() TO "service_role";

GRANT ALL ON TABLE "public"."books" TO "anon";
GRANT ALL ON TABLE "public"."books" TO "authenticated";
GRANT ALL ON TABLE "public"."books" TO "service_role";

GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."fonts" TO "anon";
GRANT ALL ON TABLE "public"."fonts" TO "authenticated";
GRANT ALL ON TABLE "public"."fonts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."fonts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."fonts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."fonts_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."frames" TO "anon";
GRANT ALL ON TABLE "public"."frames" TO "authenticated";
GRANT ALL ON TABLE "public"."frames" TO "service_role";

GRANT ALL ON SEQUENCE "public"."frames_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."frames_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."frames_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."pages" TO "anon";
GRANT ALL ON TABLE "public"."pages" TO "authenticated";
GRANT ALL ON TABLE "public"."pages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."pages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pages_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."stickers" TO "anon";
GRANT ALL ON TABLE "public"."stickers" TO "authenticated";
GRANT ALL ON TABLE "public"."stickers" TO "service_role";

GRANT ALL ON SEQUENCE "public"."stickers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."stickers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."stickers_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."templates" TO "anon";
GRANT ALL ON TABLE "public"."templates" TO "authenticated";
GRANT ALL ON TABLE "public"."templates" TO "service_role";

GRANT ALL ON SEQUENCE "public"."templates_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."templates_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."templates_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."waitlist" TO "anon";
GRANT ALL ON TABLE "public"."waitlist" TO "authenticated";
GRANT ALL ON TABLE "public"."waitlist" TO "service_role";

GRANT ALL ON SEQUENCE "public"."waitlist_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."waitlist_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."waitlist_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
